generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventMemberStatus {
  listed
  invited
  accepted
  declined
  messaged
}

enum TimeSlotStatus {
  invites
  suggested
  accepted
  declined
}

model User {
  user_id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name   String
  last_name    String
  email        String?   @db.Text
  phone_number String?   @unique @db.Text
  timezone     String
  created_date DateTime  @default(now()) @db.Timestamptz(6)
  modified_date DateTime @default(now()) @db.Timestamptz(6)

  activities   Activity[]
  members      Member[]
  events       Event[]   @relation("EventCreatedBy")
}

model Activity {
  activity_id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String  @db.Uuid
  name        String

  user        User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  events      Event[] @relation("ActivityEvents")

  @@index([user_id])
}

model Member {
  member_id   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String  @db.Uuid
  first_name  String
  last_name   String
  phone_number String?
  email       String?
  location    String?

  user        User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  eventMembers EventMember[]

  @@index([user_id])
}

model Event {
  event_id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_by_user_id String @db.Uuid
  activity_id      String? @db.Uuid
  location         String?
  max_participants Int?

  createdBy        User    @relation("EventCreatedBy", fields: [created_by_user_id], references: [user_id], onDelete: Restrict)
  activity         Activity? @relation("ActivityEvents", fields: [activity_id], references: [activity_id], onDelete: SetNull)
  eventMembers     EventMember[]
  timeSlots       TimeSlot[]

  @@index([created_by_user_id])
  @@index([activity_id])
}

model EventMember {
  event_member_id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id        String  @db.Uuid
  member_id       String  @db.Uuid
  status          EventMemberStatus @default(listed)

  event           Event   @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  member          Member  @relation(fields: [member_id], references: [member_id], onDelete: Cascade)

  @@index([event_id])
  @@index([member_id])
}

model TimeSlot {
  time_slot_id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id    String  @db.Uuid
  start_time  DateTime @db.Timestamptz(6)
  end_time    DateTime @db.Timestamptz(6)
  status      TimeSlotStatus @default(suggested)

  event       Event   @relation(fields: [event_id], references: [event_id], onDelete: Cascade)

  @@index([event_id])
}
